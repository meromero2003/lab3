/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports
import * as Ariakit from '@ariakit/react';

/**
 * Internal dependencies
 */
import _CustomSelect from '../custom-select';
import CustomSelectItem from '../item';
import * as Styled from '../styles';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
function CustomSelectControl(props) {
  const {
    __experimentalShowSelectedHint,
    __next40pxDefaultSize = false,
    describedBy,
    options,
    onChange,
    size = 'default',
    value,
    ...restProps
  } = props;

  // Forward props + store from v2 implementation
  const store = Ariakit.useSelectStore({
    async setValue(nextValue) {
      if (!onChange) {
        return;
      }

      // Executes the logic in a microtask after the popup is closed.
      // This is simply to ensure the isOpen state matches that in Downshift.
      await Promise.resolve();
      const state = store.getState();
      const changeObject = {
        highlightedIndex: state.renderedItems.findIndex(item => item.value === nextValue),
        inputValue: '',
        isOpen: state.open,
        selectedItem: {
          name: nextValue,
          key: nextValue
        },
        type: ''
      };
      onChange(changeObject);
    }
  });
  const children = options.map(({
    name,
    key,
    __experimentalHint,
    ...rest
  }) => {
    const withHint = /*#__PURE__*/_jsxs(Styled.WithHintWrapper, {
      children: [/*#__PURE__*/_jsx("span", {
        children: name
      }), /*#__PURE__*/_jsx(Styled.ExperimentalHintItem, {
        className: "components-custom-select-control__item-hint",
        children: __experimentalHint
      })]
    });
    return /*#__PURE__*/_jsx(CustomSelectItem, {
      value: name,
      children: __experimentalHint ? withHint : name,
      ...rest
    }, key);
  });
  const renderSelectedValueHint = () => {
    const {
      value: currentValue
    } = store.getState();
    const currentHint = options?.find(({
      name
    }) => currentValue === name);
    return /*#__PURE__*/_jsxs(_Fragment, {
      children: [currentValue, /*#__PURE__*/_jsx(Styled.SelectedExperimentalHintItem, {
        className: "components-custom-select-control__hint",
        children: currentHint?.__experimentalHint
      })]
    });
  };
  const translatedSize = (() => {
    if (__next40pxDefaultSize && size === 'default' || size === '__unstable-large') {
      return 'default';
    }
    if (!__next40pxDefaultSize && size === 'default') {
      return 'compact';
    }
    return size;
  })();
  return /*#__PURE__*/_jsx(_CustomSelect, {
    "aria-describedby": describedBy,
    renderSelectedValue: __experimentalShowSelectedHint ? renderSelectedValueHint : undefined,
    size: translatedSize,
    store: store,
    ...restProps,
    children: children
  });
}
export default CustomSelectControl;
//# sourceMappingURL=index.js.map