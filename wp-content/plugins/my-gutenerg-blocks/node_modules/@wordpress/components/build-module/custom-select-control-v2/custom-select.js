/**
 * WordPress dependencies
 */
import { createContext, useMemo } from '@wordpress/element';
import { __, sprintf } from '@wordpress/i18n';

/**
 * Internal dependencies
 */
import { VisuallyHidden } from '..';
import * as Styled from './styles';
import InputBase from '../input-control/input-base';
import SelectControlChevronDown from '../select-control/chevron-down';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
export const CustomSelectContext = createContext(undefined);
function defaultRenderSelectedValue(value) {
  const isValueEmpty = Array.isArray(value) ? value.length === 0 : value === undefined || value === null;
  if (isValueEmpty) {
    return __('Select an item');
  }
  if (Array.isArray(value)) {
    return value.length === 1 ? value[0] :
    // translators: %s: number of items selected (it will always be 2 or more items)
    sprintf(__('%s items selected'), value.length);
  }
  return value;
}
const CustomSelectButton = ({
  renderSelectedValue,
  size = 'default',
  store,
  ...restProps
}) => {
  const {
    value: currentValue
  } = store.useState();
  const computedRenderSelectedValue = useMemo(() => renderSelectedValue !== null && renderSelectedValue !== void 0 ? renderSelectedValue : defaultRenderSelectedValue, [renderSelectedValue]);
  return /*#__PURE__*/_jsx(Styled.Select, {
    ...restProps,
    size: size,
    hasCustomRenderProp: !!renderSelectedValue,
    store: store
    // to match legacy behavior where using arrow keys
    // move selection rather than open the popover
    ,
    showOnKeyDown: false,
    children: /*#__PURE__*/_jsx("div", {
      children: computedRenderSelectedValue(currentValue)
    })
  });
};
function _CustomSelect(props) {
  const {
    children,
    hideLabelFromVision = false,
    label,
    size,
    store,
    ...restProps
  } = props;
  return /*#__PURE__*/_jsxs(_Fragment, {
    children: [hideLabelFromVision ?
    /*#__PURE__*/
    // TODO: Replace with BaseControl
    _jsx(VisuallyHidden, {
      as: "label",
      children: label
    }) : /*#__PURE__*/_jsx(Styled.SelectLabel, {
      store: store,
      children: label
    }), /*#__PURE__*/_jsxs(InputBase, {
      __next40pxDefaultSize: true,
      size: size,
      suffix: /*#__PURE__*/_jsx(SelectControlChevronDown, {}),
      children: [/*#__PURE__*/_jsx(CustomSelectButton, {
        ...restProps,
        size: size,
        store: store
      }), /*#__PURE__*/_jsx(Styled.SelectPopover, {
        gutter: 12,
        store: store,
        sameWidth: true,
        children: /*#__PURE__*/_jsx(CustomSelectContext.Provider, {
          value: {
            store
          },
          children: children
        })
      })]
    })]
  });
}
export default _CustomSelect;
//# sourceMappingURL=custom-select.js.map