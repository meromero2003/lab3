/**
 * External dependencies
 */
import clsx from 'clsx';
/**
 * WordPress dependencies
 */
import { useInstanceId } from '@wordpress/compose';

/**
 * Internal dependencies
 */
import BaseControl from '../base-control';
import { VStack } from '../v-stack';

/**
 * Render a user interface to select the user type using radio inputs.
 *
 * ```jsx
 * import { RadioControl } from '@wordpress/components';
 * import { useState } from '@wordpress/element';
 *
 * const MyRadioControl = () => {
 *   const [ option, setOption ] = useState( 'a' );
 *
 *   return (
 *     <RadioControl
 *       label="User type"
 *       help="The type of the current user"
 *       selected={ option }
 *       options={ [
 *         { label: 'Author', value: 'a' },
 *         { label: 'Editor', value: 'e' },
 *       ] }
 *       onChange={ ( value ) => setOption( value ) }
 *     />
 *   );
 * };
 * ```
 */
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export function RadioControl(props) {
  const {
    label,
    className,
    selected,
    help,
    onChange,
    hideLabelFromVision,
    options = [],
    ...additionalProps
  } = props;
  const instanceId = useInstanceId(RadioControl);
  const id = `inspector-radio-control-${instanceId}`;
  const onChangeValue = event => onChange(event.target.value);
  if (!options?.length) {
    return null;
  }
  return /*#__PURE__*/_jsx(BaseControl, {
    __nextHasNoMarginBottom: true,
    label: label,
    id: id,
    hideLabelFromVision: hideLabelFromVision,
    help: help,
    className: clsx(className, 'components-radio-control'),
    children: /*#__PURE__*/_jsx(VStack, {
      spacing: 1,
      children: options.map((option, index) => /*#__PURE__*/_jsxs("div", {
        className: "components-radio-control__option",
        children: [/*#__PURE__*/_jsx("input", {
          id: `${id}-${index}`,
          className: "components-radio-control__input",
          type: "radio",
          name: id,
          value: option.value,
          onChange: onChangeValue,
          checked: option.value === selected,
          "aria-describedby": !!help ? `${id}__help` : undefined,
          ...additionalProps
        }), /*#__PURE__*/_jsx("label", {
          className: "components-radio-control__label",
          htmlFor: `${id}-${index}`,
          children: option.label
        })]
      }, `${id}-${index}`))
    })
  });
}
export default RadioControl;
//# sourceMappingURL=index.js.map