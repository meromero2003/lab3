/**
 * External dependencies
 */
import clsx from 'clsx';

/**
 * WordPress dependencies
 */
import { __, isRTL } from '@wordpress/i18n';
import { useInstanceId } from '@wordpress/compose';

/**
 * Internal dependencies
 */
import Cell from './cell';
import { Composite, CompositeRow, useCompositeStore } from '../composite/v2';
import { Root, Row } from './styles/alignment-matrix-control-styles';
import AlignmentMatrixControlIcon from './icon';
import { GRID, getItemId, getItemValue } from './utils';
import { jsx as _jsx } from "react/jsx-runtime";
/**
 *
 * AlignmentMatrixControl components enable adjustments to horizontal and vertical alignments for UI.
 *
 * ```jsx
 * import { __experimentalAlignmentMatrixControl as AlignmentMatrixControl } from '@wordpress/components';
 * import { useState } from '@wordpress/element';
 *
 * const Example = () => {
 * 	const [ alignment, setAlignment ] = useState( 'center center' );
 *
 * 	return (
 * 		<AlignmentMatrixControl
 * 			value={ alignment }
 * 			onChange={ setAlignment }
 * 		/>
 * 	);
 * };
 * ```
 */
export function AlignmentMatrixControl({
  className,
  id,
  label = __('Alignment Matrix Control'),
  defaultValue = 'center center',
  value,
  onChange,
  width = 92,
  ...props
}) {
  const baseId = useInstanceId(AlignmentMatrixControl, 'alignment-matrix-control', id);
  const compositeStore = useCompositeStore({
    defaultActiveId: getItemId(baseId, defaultValue),
    activeId: getItemId(baseId, value),
    setActiveId: nextActiveId => {
      const nextValue = getItemValue(baseId, nextActiveId);
      if (nextValue) {
        onChange?.(nextValue);
      }
    },
    rtl: isRTL()
  });
  const activeId = compositeStore.useState('activeId');
  const classes = clsx('component-alignment-matrix-control', className);
  return /*#__PURE__*/_jsx(Composite, {
    store: compositeStore,
    render: /*#__PURE__*/_jsx(Root, {
      ...props,
      "aria-label": label,
      className: classes,
      id: baseId,
      role: "grid",
      size: width
    }),
    children: GRID.map((cells, index) => /*#__PURE__*/_jsx(CompositeRow, {
      render: /*#__PURE__*/_jsx(Row, {
        role: "row"
      }),
      children: cells.map(cell => {
        const cellId = getItemId(baseId, cell);
        const isActive = cellId === activeId;
        return /*#__PURE__*/_jsx(Cell, {
          id: cellId,
          isActive: isActive,
          value: cell
        }, cell);
      })
    }, index))
  });
}
AlignmentMatrixControl.Icon = AlignmentMatrixControlIcon;
export default AlignmentMatrixControl;
//# sourceMappingURL=index.js.map