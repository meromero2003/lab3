"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TabList = void 0;
var Ariakit = _interopRequireWildcard(require("@ariakit/react"));
var _warning = _interopRequireDefault(require("@wordpress/warning"));
var _element = require("@wordpress/element");
var _context = require("./context");
var _styles = require("./styles");
var _clsx = _interopRequireDefault(require("clsx"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function useTrackElementOffset(targetElement, onUpdate) {
  const [indicatorPosition, setIndicatorPosition] = (0, _element.useState)({
    left: 0,
    top: 0,
    width: 0,
    height: 0
  });

  // TODO: replace with useEventCallback or similar when officially available.
  const updateCallbackRef = (0, _element.useRef)(onUpdate);
  (0, _element.useLayoutEffect)(() => {
    updateCallbackRef.current = onUpdate;
  });
  const observedElementRef = (0, _element.useRef)();
  const resizeObserverRef = (0, _element.useRef)();
  (0, _element.useEffect)(() => {
    if (targetElement === observedElementRef.current) {
      return;
    }
    observedElementRef.current = targetElement !== null && targetElement !== void 0 ? targetElement : undefined;
    function updateIndicator(element) {
      setIndicatorPosition({
        left: element.offsetLeft,
        top: element.offsetTop,
        width: element.offsetWidth,
        height: element.offsetHeight
      });
      updateCallbackRef.current?.();
    }

    // Set up a ResizeObserver.
    if (!resizeObserverRef.current) {
      resizeObserverRef.current = new ResizeObserver(() => {
        if (observedElementRef.current) {
          updateIndicator(observedElementRef.current);
        }
      });
    }
    const {
      current: resizeObserver
    } = resizeObserverRef;

    // Observe new element.
    if (targetElement) {
      updateIndicator(targetElement);
      resizeObserver.observe(targetElement);
    }
    return () => {
      // Unobserve previous element.
      if (observedElementRef.current) {
        resizeObserver.unobserve(observedElementRef.current);
      }
    };
  }, [targetElement]);
  return indicatorPosition;
}
function useOnValueUpdate(value, onUpdate) {
  const previousValueRef = (0, _element.useRef)(value);

  // TODO: replace with useEventCallback or similar when officially available.
  const updateCallbackRef = (0, _element.useRef)(onUpdate);
  (0, _element.useLayoutEffect)(() => {
    updateCallbackRef.current = onUpdate;
  });
  (0, _element.useEffect)(() => {
    if (previousValueRef.current !== value) {
      updateCallbackRef.current({
        previousValue: previousValueRef.current
      });
      previousValueRef.current = value;
    }
  }, [value]);
}
const TabList = exports.TabList = (0, _element.forwardRef)(function TabList({
  children,
  ...otherProps
}, ref) {
  const context = (0, _context.useTabsContext)();
  const selectedId = context?.store.useState('selectedId');
  const indicatorPosition = useTrackElementOffset(context?.store.item(selectedId)?.element);
  const [animationEnabled, setAnimationEnabled] = (0, _element.useState)(false);
  useOnValueUpdate(selectedId, ({
    previousValue
  }) => previousValue && setAnimationEnabled(true));
  if (!context) {
    globalThis.SCRIPT_DEBUG === true ? (0, _warning.default)('`Tabs.TabList` must be wrapped in a `Tabs` component.') : void 0;
    return null;
  }
  const {
    store
  } = context;
  const {
    activeId,
    selectOnMove
  } = store.useState();
  const {
    setActiveId
  } = store;
  const onBlur = () => {
    if (!selectOnMove) {
      return;
    }

    // When automatic tab selection is on, make sure that the active tab is up
    // to date with the selected tab when leaving the tablist. This makes sure
    // that the selected tab will receive keyboard focus when tabbing back into
    // the tablist.
    if (selectedId !== activeId) {
      setActiveId(selectedId);
    }
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Ariakit.TabList, {
    ref: ref,
    store: store,
    render: /*#__PURE__*/(0, _jsxRuntime.jsx)(_styles.TabListWrapper, {
      onTransitionEnd: event => {
        if (event.pseudoElement === '::after') {
          setAnimationEnabled(false);
        }
      }
    }),
    onBlur: onBlur,
    ...otherProps,
    style: {
      '--indicator-left': `${indicatorPosition.left}px`,
      '--indicator-top': `${indicatorPosition.top}px`,
      '--indicator-width': `${indicatorPosition.width}px`,
      '--indicator-height': `${indicatorPosition.height}px`,
      ...otherProps.style
    },
    className: (0, _clsx.default)(animationEnabled ? 'is-animation-enabled' : '', otherProps.className),
    children: children
  });
});
//# sourceMappingURL=tablist.js.map