/// <reference types="react" />
export declare const Wrapper: import("@emotion/styled").StyledComponent<Omit<import("../../h-stack/types").Props, "spacing" | "alignment"> & {
    alignment?: (string & {}) | "-moz-initial" | "inherit" | "initial" | "revert" | "revert-layer" | "unset" | "stretch" | "center" | "end" | "flex-end" | "flex-start" | "start" | "baseline" | "normal" | "self-end" | "self-start" | "left" | "right" | "bottom" | "top" | "edge" | "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | undefined;
    spacing?: import("csstype").Property.Width<string | number> | undefined;
} & import("react").RefAttributes<any> & Omit<Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref">, "wrap" | "expanded" | "justify" | "direction" | "spacing" | "children" | "as" | "alignment" | keyof import("react").RefAttributes<any> | "isReversed"> & {
    as?: keyof JSX.IntrinsicElements | undefined;
} & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
//# sourceMappingURL=styles.d.ts.map