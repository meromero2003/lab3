"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _blocks = require("@wordpress/blocks");
var _data = require("@wordpress/data");
var _element = require("@wordpress/element");
var _globalStyles = require("../components/global-styles");
var _utils = require("./utils");
var _store = require("../store");
var _privateKeys = require("../store/private-keys");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Get the first block style variation that has been registered from the class string.
 *
 * @param {string} className        CSS class string for a block.
 * @param {Array}  registeredStyles Currently registered block styles.
 *
 * @return {string|null} The name of the first registered variation.
 */
function getVariationNameFromClass(className, registeredStyles = []) {
  // The global flag affects how capturing groups work in JS. So the regex
  // below will only return full CSS classes not just the variation name.
  const matches = className?.match(/\bis-style-(?!default)(\S+)\b/g);
  if (!matches) {
    return null;
  }
  for (const variationClass of matches) {
    const variation = variationClass.substring(9); // Remove 'is-style-' prefix.
    if (registeredStyles.some(style => style.name === variation)) {
      return variation;
    }
  }
  return null;
}
function useBlockSyleVariation(name, variation, clientId) {
  // Prefer global styles data in GlobalStylesContext, which are available
  // if in the site editor. Otherwise fall back to whatever is in the
  // editor settings and available in the post editor.
  const {
    merged: mergedConfig
  } = (0, _element.useContext)(_globalStyles.GlobalStylesContext);
  const {
    globalSettings,
    globalStyles
  } = (0, _data.useSelect)(select => {
    const settings = select(_store.store).getSettings();
    return {
      globalSettings: settings.__experimentalFeatures,
      globalStyles: settings[_privateKeys.globalStylesDataKey]
    };
  }, []);
  return (0, _element.useMemo)(() => {
    var _mergedConfig$styles, _mergedConfig$setting;
    const styles = (_mergedConfig$styles = mergedConfig?.styles) !== null && _mergedConfig$styles !== void 0 ? _mergedConfig$styles : globalStyles;
    const variationStyles = styles?.blocks?.[name]?.variations?.[variation];
    return {
      settings: (_mergedConfig$setting = mergedConfig?.settings) !== null && _mergedConfig$setting !== void 0 ? _mergedConfig$setting : globalSettings,
      // The variation style data is all that is needed to generate
      // the styles for the current application to a block. The variation
      // name is updated to match the instance specific class name.
      styles: {
        blocks: {
          [name]: {
            variations: {
              [`${variation}-${clientId}`]: variationStyles
            }
          }
        }
      }
    };
  }, [mergedConfig, globalSettings, globalStyles, variation, clientId, name]);
}

// Rather than leveraging `useInstanceId` here, the `clientId` is used.
// This is so that the variation style override's ID is predictable
// when the order of applied style variations changes.
function useBlockProps({
  name,
  className,
  clientId
}) {
  const {
    getBlockStyles
  } = (0, _data.useSelect)(_blocks.store);
  const registeredStyles = getBlockStyles(name);
  const variation = getVariationNameFromClass(className, registeredStyles);
  const variationClass = `is-style-${variation}-${clientId}`;
  const {
    settings,
    styles
  } = useBlockSyleVariation(name, variation, clientId);
  const variationStyles = (0, _element.useMemo)(() => {
    if (!variation) {
      return;
    }
    const variationConfig = {
      settings,
      styles
    };
    const blockSelectors = (0, _globalStyles.getBlockSelectors)((0, _blocks.getBlockTypes)(), getBlockStyles, clientId);
    const hasBlockGapSupport = false;
    const hasFallbackGapSupport = true;
    const disableLayoutStyles = true;
    const isTemplate = true;
    return (0, _globalStyles.toStyles)(variationConfig, blockSelectors, hasBlockGapSupport, hasFallbackGapSupport, disableLayoutStyles, isTemplate, {
      blockGap: false,
      blockStyles: true,
      layoutStyles: false,
      marginReset: false,
      presets: false,
      rootPadding: false
    });
  }, [variation, settings, styles, getBlockStyles, clientId]);
  (0, _utils.useStyleOverride)({
    id: `variation-${clientId}`,
    css: variationStyles,
    __unstableType: 'variation',
    // The clientId will be stored with the override and used to ensure
    // the order of overrides matches the order of blocks so that the
    // correct CSS cascade is maintained.
    clientId
  });
  return variation ? {
    className: variationClass
  } : {};
}
var _default = exports.default = {
  hasSupport: () => true,
  attributeKeys: ['className'],
  useBlockProps
};
//# sourceMappingURL=block-style-variation.js.map