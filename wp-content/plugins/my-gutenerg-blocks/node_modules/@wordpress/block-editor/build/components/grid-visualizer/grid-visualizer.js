"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GridVisualizer = GridVisualizer;
var _element = require("@wordpress/element");
var _data = require("@wordpress/data");
var _useBlockRefs = require("../block-list/use-block-props/use-block-refs");
var _cover = _interopRequireDefault(require("../block-popover/cover"));
var _store = require("../../store");
var _utils = require("./utils");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function GridVisualizer({
  clientId,
  contentRef
}) {
  const isDistractionFree = (0, _data.useSelect)(select => select(_store.store).getSettings().isDistractionFree, []);
  const blockElement = (0, _useBlockRefs.__unstableUseBlockElement)(clientId);
  if (isDistractionFree || !blockElement) {
    return null;
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_cover.default, {
    className: "block-editor-grid-visualizer",
    clientId: clientId,
    __unstablePopoverSlot: "block-toolbar",
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(GridVisualizerGrid, {
      ref: contentRef,
      blockElement: blockElement
    })
  });
}
const GridVisualizerGrid = (0, _element.forwardRef)(({
  blockElement
}, ref) => {
  const [gridInfo, setGridInfo] = (0, _element.useState)(() => getGridInfo(blockElement));
  (0, _element.useEffect)(() => {
    const observers = [];
    for (const element of [blockElement, ...blockElement.children]) {
      const observer = new window.ResizeObserver(() => {
        setGridInfo(getGridInfo(blockElement));
      });
      observer.observe(element);
      observers.push(observer);
    }
    return () => {
      for (const observer of observers) {
        observer.disconnect();
      }
    };
  }, [blockElement]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    ref: ref,
    className: "block-editor-grid-visualizer__grid",
    style: gridInfo.style,
    children: Array.from({
      length: gridInfo.numItems
    }, (_, i) => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "block-editor-grid-visualizer__item",
      style: {
        boxShadow: `inset 0 0 0 1px color-mix(in srgb, ${gridInfo.currentColor} 20%, #0000)`
      }
    }, i))
  });
});
function getGridInfo(blockElement) {
  const gridTemplateColumns = (0, _utils.getComputedCSS)(blockElement, 'grid-template-columns');
  const gridTemplateRows = (0, _utils.getComputedCSS)(blockElement, 'grid-template-rows');
  const numColumns = gridTemplateColumns.split(' ').length;
  const numRows = gridTemplateRows.split(' ').length;
  const numItems = numColumns * numRows;
  return {
    numItems,
    currentColor: (0, _utils.getComputedCSS)(blockElement, 'color'),
    style: {
      gridTemplateColumns,
      gridTemplateRows,
      gap: (0, _utils.getComputedCSS)(blockElement, 'gap'),
      padding: (0, _utils.getComputedCSS)(blockElement, 'padding')
    }
  };
}
//# sourceMappingURL=grid-visualizer.js.map