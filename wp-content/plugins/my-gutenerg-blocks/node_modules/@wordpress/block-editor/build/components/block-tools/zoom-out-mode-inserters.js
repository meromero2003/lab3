"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _data = require("@wordpress/data");
var _element = require("@wordpress/element");
var _components = require("@wordpress/components");
var _icons = require("@wordpress/icons");
var _i18n = require("@wordpress/i18n");
var _inbetween = _interopRequireDefault(require("../block-popover/inbetween"));
var _store = require("../../store");
var _lockUnlock = require("../../lock-unlock");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function ZoomOutModeInserters() {
  const [isReady, setIsReady] = (0, _element.useState)(false);
  const {
    blockOrder,
    sectionRootClientId,
    insertionPoint,
    setInserterIsOpened,
    selectedSection
  } = (0, _data.useSelect)(select => {
    const {
      getSettings,
      getBlockOrder
    } = select(_store.store);
    const {
      sectionRootClientId: root
    } = (0, _lockUnlock.unlock)(getSettings());
    // To do: move ZoomOutModeInserters to core/editor.
    // Or we perhaps we should move the insertion point state to the
    // block-editor store. I'm not sure what it was ever moved to the editor
    // store, because all the inserter components all live in the
    // block-editor package.
    // eslint-disable-next-line @wordpress/data-no-store-string-literals
    const editor = select('core/editor');
    return {
      selectedSection: editor.getSelectedBlock(),
      blockOrder: getBlockOrder(root),
      insertionPoint: (0, _lockUnlock.unlock)(editor).getInsertionPoint(),
      sectionRootClientId: root,
      setInserterIsOpened: getSettings().__experimentalSetIsInserterOpened
    };
  }, []);
  const isMounted = (0, _element.useRef)(false);
  (0, _element.useEffect)(() => {
    if (!isMounted.current) {
      isMounted.current = true;
      return;
    }
    // reset insertion point when the block order changes
    setInserterIsOpened(true);
  }, [blockOrder, setInserterIsOpened]);

  // Defer the initial rendering to avoid the jumps due to the animation.
  (0, _element.useEffect)(() => {
    const timeout = setTimeout(() => {
      setIsReady(true);
    }, 500);
    return () => {
      clearTimeout(timeout);
    };
  }, []);
  if (!isReady || !selectedSection) {
    return null;
  }
  return [undefined, ...blockOrder].map((clientId, index) => {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_inbetween.default, {
      previousClientId: clientId,
      nextClientId: blockOrder[index],
      children: [insertionPoint.insertionIndex === index && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        style: {
          borderRadius: '0',
          height: '12px',
          opacity: 1,
          transform: 'translateY(-50%)',
          width: '100%'
        },
        className: "block-editor-block-list__insertion-point-indicator"
      }), insertionPoint.insertionIndex !== index && /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
        variant: "primary",
        icon: _icons.plus,
        size: "compact",
        className: "block-editor-button-pattern-inserter__button",
        onClick: () => {
          setInserterIsOpened({
            rootClientId: sectionRootClientId,
            insertionIndex: index,
            tab: 'patterns',
            category: 'all'
          });
        },
        label: (0, _i18n._x)('Add pattern', 'Generic label for pattern inserter button')
      })]
    }, index);
  });
}
var _default = exports.default = ZoomOutModeInserters;
//# sourceMappingURL=zoom-out-mode-inserters.js.map