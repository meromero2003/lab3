"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ButtonBlockerAppender = void 0;
var _clsx = _interopRequireDefault(require("clsx"));
var _components = require("@wordpress/components");
var _element = require("@wordpress/element");
var _i18n = require("@wordpress/i18n");
var _icons = require("@wordpress/icons");
var _deprecated = _interopRequireDefault(require("@wordpress/deprecated"));
var _inserter = _interopRequireDefault(require("../inserter"));
var _jsxRuntime = require("react/jsx-runtime");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function ButtonBlockAppender({
  rootClientId,
  className,
  onFocus,
  tabIndex
}, ref) {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_inserter.default, {
    position: "bottom center",
    rootClientId: rootClientId,
    __experimentalIsQuick: true,
    renderToggle: ({
      onToggle,
      disabled,
      isOpen,
      blockTitle,
      hasSingleBlockType
    }) => {
      let label;
      if (hasSingleBlockType) {
        label = (0, _i18n.sprintf)(
        // translators: %s: the name of the block when there is only one
        (0, _i18n._x)('Add %s', 'directly add the only allowed block'), blockTitle);
      } else {
        label = (0, _i18n._x)('Add block', 'Generic label for block inserter button');
      }
      const isToggleButton = !hasSingleBlockType;
      let inserterButton = /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.Button, {
        ref: ref,
        onFocus: onFocus,
        tabIndex: tabIndex,
        className: (0, _clsx.default)(className, 'block-editor-button-block-appender'),
        onClick: onToggle,
        "aria-haspopup": isToggleButton ? 'true' : undefined,
        "aria-expanded": isToggleButton ? isOpen : undefined,
        disabled: disabled,
        label: label,
        children: [!hasSingleBlockType && /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.VisuallyHidden, {
          as: "span",
          children: label
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_icons.Icon, {
          icon: _icons.plus
        })]
      });
      if (isToggleButton || hasSingleBlockType) {
        inserterButton = /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Tooltip, {
          text: label,
          children: inserterButton
        });
      }
      return inserterButton;
    },
    isAppender: true
  });
}

/**
 * Use `ButtonBlockAppender` instead.
 *
 * @deprecated
 */
const ButtonBlockerAppender = exports.ButtonBlockerAppender = (0, _element.forwardRef)((props, ref) => {
  (0, _deprecated.default)(`wp.blockEditor.ButtonBlockerAppender`, {
    alternative: 'wp.blockEditor.ButtonBlockAppender',
    since: '5.9'
  });
  return ButtonBlockAppender(props, ref);
});

/**
 * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/button-block-appender/README.md
 */
var _default = exports.default = (0, _element.forwardRef)(ButtonBlockAppender);
//# sourceMappingURL=index.js.map