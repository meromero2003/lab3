"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _i18n = require("@wordpress/i18n");
var _keycodes = require("@wordpress/keycodes");
var _components = require("@wordpress/components");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

const noop = () => {};
function BlockAlignmentMatrixControl(props) {
  const {
    label = (0, _i18n.__)('Change matrix alignment'),
    onChange = noop,
    value = 'center',
    isDisabled
  } = props;
  const icon = /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalAlignmentMatrixControl.Icon, {
    value: value
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Dropdown, {
    popoverProps: {
      placement: 'bottom-start'
    },
    renderToggle: ({
      onToggle,
      isOpen
    }) => {
      const openOnArrowDown = event => {
        if (!isOpen && event.keyCode === _keycodes.DOWN) {
          event.preventDefault();
          onToggle();
        }
      };
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.ToolbarButton, {
        onClick: onToggle,
        "aria-haspopup": "true",
        "aria-expanded": isOpen,
        onKeyDown: openOnArrowDown,
        label: label,
        icon: icon,
        showTooltip: true,
        disabled: isDisabled
      });
    },
    renderContent: () => /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalAlignmentMatrixControl, {
      hasFocusBorder: false,
      onChange: onChange,
      value: value
    })
  });
}
var _default = exports.default = BlockAlignmentMatrixControl;
//# sourceMappingURL=index.js.map