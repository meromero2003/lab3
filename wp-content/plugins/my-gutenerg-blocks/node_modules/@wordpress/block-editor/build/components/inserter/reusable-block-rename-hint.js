"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ReusableBlocksRenameHint;
exports.useReusableBlocksRenameHint = useReusableBlocksRenameHint;
var _components = require("@wordpress/components");
var _data = require("@wordpress/data");
var _dom = require("@wordpress/dom");
var _element = require("@wordpress/element");
var _i18n = require("@wordpress/i18n");
var _icons = require("@wordpress/icons");
var _preferences = require("@wordpress/preferences");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

const PREFERENCE_NAME = 'isResuableBlocksrRenameHintVisible';
/*
 * This hook was added in 6.3 to help users with the transition from Reusable blocks to Patterns.
 * It is only exported for use in the reusable-blocks package as well as block-editor.
 * It will be removed in 6.4. and should not be used in any new code.
 */
function useReusableBlocksRenameHint() {
  return (0, _data.useSelect)(select => {
    var _select$get;
    return (_select$get = select(_preferences.store).get('core', PREFERENCE_NAME)) !== null && _select$get !== void 0 ? _select$get : true;
  }, []);
}

/*
 * This component was added in 6.3 to help users with the transition from Reusable blocks to Patterns.
 * It is only exported for use in the reusable-blocks package as well as block-editor.
 * It will be removed in 6.4. and should not be used in any new code.
 */
function ReusableBlocksRenameHint() {
  const isReusableBlocksRenameHint = (0, _data.useSelect)(select => {
    var _select$get2;
    return (_select$get2 = select(_preferences.store).get('core', PREFERENCE_NAME)) !== null && _select$get2 !== void 0 ? _select$get2 : true;
  }, []);
  const ref = (0, _element.useRef)();
  const {
    set: setPreference
  } = (0, _data.useDispatch)(_preferences.store);
  if (!isReusableBlocksRenameHint) {
    return null;
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    ref: ref,
    className: "reusable-blocks-menu-items__rename-hint",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "reusable-blocks-menu-items__rename-hint-content",
      children: (0, _i18n.__)('Reusable blocks are now synced patterns. A synced pattern will behave in exactly the same way as a reusable block.')
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
      className: "reusable-blocks-menu-items__rename-hint-dismiss",
      icon: _icons.close,
      iconSize: "16",
      label: (0, _i18n.__)('Dismiss hint'),
      onClick: () => {
        // Retain focus when dismissing the element.
        const previousElement = _dom.focus.tabbable.findPrevious(ref.current);
        previousElement?.focus();
        setPreference('core', PREFERENCE_NAME, false);
      },
      showTooltip: false
    })]
  });
}
//# sourceMappingURL=reusable-block-rename-hint.js.map