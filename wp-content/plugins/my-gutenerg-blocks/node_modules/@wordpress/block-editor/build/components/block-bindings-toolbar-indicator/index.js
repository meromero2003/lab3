"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BlockBindingsToolbarIndicator;
var _element = require("@wordpress/element");
var _i18n = require("@wordpress/i18n");
var _components = require("@wordpress/components");
var _blocks = require("@wordpress/blocks");
var _data = require("@wordpress/data");
var _icons = require("@wordpress/icons");
var _store = require("../../store");
var _blockIcon = _interopRequireDefault(require("../block-icon"));
var _useBlockDisplayTitle = _interopRequireDefault(require("../block-title/use-block-display-title"));
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function BlockBindingsToolbarIndicator({
  clientIds
}) {
  const isSingleBlockSelected = clientIds.length === 1;
  const {
    icon,
    firstBlockName,
    isConnectedToPatternOverrides
  } = (0, _data.useSelect)(select => {
    const {
      getBlockAttributes,
      getBlockNamesByClientId,
      getBlocksByClientId
    } = select(_store.store);
    const {
      getBlockType,
      getActiveBlockVariation
    } = select(_blocks.store);
    const blockTypeNames = getBlockNamesByClientId(clientIds);
    const _firstBlockTypeName = blockTypeNames[0];
    const firstBlockType = getBlockType(_firstBlockTypeName);
    let _icon;
    if (isSingleBlockSelected) {
      const match = getActiveBlockVariation(_firstBlockTypeName, getBlockAttributes(clientIds[0]));
      // Take into account active block variations.
      _icon = match?.icon || firstBlockType.icon;
    } else {
      const isSelectionOfSameType = new Set(blockTypeNames).size === 1;
      // When selection consists of blocks of multiple types, display an
      // appropriate icon to communicate the non-uniformity.
      _icon = isSelectionOfSameType ? firstBlockType.icon : _icons.copy;
    }
    return {
      icon: _icon,
      firstBlockName: getBlockAttributes(clientIds[0]).metadata.name,
      isConnectedToPatternOverrides: getBlocksByClientId(clientIds).some(block => Object.values(block?.attributes.metadata?.bindings).some(binding => binding.source === 'core/pattern-overrides'))
    };
  }, [clientIds, isSingleBlockSelected]);
  const firstBlockTitle = (0, _useBlockDisplayTitle.default)({
    clientId: clientIds[0],
    maximumLength: 35
  });
  let blockDescription = isSingleBlockSelected ? (0, _i18n._x)('This block is connected.', 'block toolbar button label and description') : (0, _i18n._x)('These blocks are connected.', 'block toolbar button label and description');
  if (isConnectedToPatternOverrides && firstBlockName) {
    blockDescription = isSingleBlockSelected ? (0, _i18n.sprintf)( /* translators: %1s: The block type's name; %2s: The block's user-provided name (the same as the override name). */
    (0, _i18n.__)('This %1$s is editable using the "%2$s" override.'), firstBlockTitle.toLowerCase(), firstBlockName) : (0, _i18n.__)('These blocks are editable using overrides.');
  }
  const descriptionId = (0, _element.useId)();
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.ToolbarGroup, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.ToolbarItem, {
      children: toggleProps => /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.DropdownMenu, {
        className: "block-editor-block-bindings-toolbar-indicator",
        label: firstBlockTitle,
        popoverProps: {
          placement: 'bottom-start',
          className: 'block-editor-block-bindings-toolbar-indicator__popover'
        },
        icon: /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_blockIcon.default, {
            icon: icon,
            className: "block-editor-block-bindings-toolbar-indicator-icon",
            showColors: true
          })
        }),
        toggleProps: {
          describedBy: blockDescription,
          ...toggleProps
        },
        menuProps: {
          orientation: 'both',
          'aria-describedby': descriptionId
        },
        children: () => /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalText, {
          id: descriptionId,
          children: blockDescription
        })
      })
    })
  });
}
//# sourceMappingURL=index.js.map