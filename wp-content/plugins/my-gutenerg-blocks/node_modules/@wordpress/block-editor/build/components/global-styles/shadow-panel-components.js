"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ShadowIndicator = ShadowIndicator;
exports.ShadowPopover = ShadowPopover;
exports.ShadowPopoverContainer = ShadowPopoverContainer;
exports.ShadowPresets = ShadowPresets;
exports.useShadowPresets = useShadowPresets;
var _i18n = require("@wordpress/i18n");
var _components = require("@wordpress/components");
var _element = require("@wordpress/element");
var _icons = require("@wordpress/icons");
var _clsx = _interopRequireDefault(require("clsx"));
var _lockUnlock = require("../../lock-unlock");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

/**
 * External dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Shared reference to an empty array for cases where it is important to avoid
 * returning a new array reference on every invocation.
 *
 * @type {Array}
 */const EMPTY_ARRAY = [];
const {
  CompositeItemV2: CompositeItem,
  CompositeV2: Composite,
  useCompositeStoreV2: useCompositeStore
} = (0, _lockUnlock.unlock)(_components.privateApis);
function ShadowPopoverContainer({
  shadow,
  onShadowChange,
  settings
}) {
  const shadows = useShadowPresets(settings);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: "block-editor-global-styles__shadow-popover-container",
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalVStack, {
      spacing: 4,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalHeading, {
        level: 5,
        children: (0, _i18n.__)('Drop shadow')
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(ShadowPresets, {
        presets: shadows,
        activeShadow: shadow,
        onSelect: onShadowChange
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "block-editor-global-styles__clear-shadow",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
          variant: "tertiary",
          onClick: () => onShadowChange(undefined),
          children: (0, _i18n.__)('Clear')
        })
      })]
    })
  });
}
function ShadowPresets({
  presets,
  activeShadow,
  onSelect
}) {
  const compositeStore = useCompositeStore();
  return !presets ? null : /*#__PURE__*/(0, _jsxRuntime.jsx)(Composite, {
    store: compositeStore,
    role: "listbox",
    className: "block-editor-global-styles__shadow__list",
    "aria-label": (0, _i18n.__)('Drop shadows'),
    children: presets.map(({
      name,
      slug,
      shadow
    }) => /*#__PURE__*/(0, _jsxRuntime.jsx)(ShadowIndicator, {
      label: name,
      isActive: shadow === activeShadow,
      type: slug === 'unset' ? 'unset' : 'preset',
      onSelect: () => onSelect(shadow === activeShadow ? undefined : shadow),
      shadow: shadow
    }, slug))
  });
}
function ShadowIndicator({
  type,
  label,
  isActive,
  onSelect,
  shadow
}) {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(CompositeItem, {
    role: "option",
    "aria-label": label,
    "aria-selected": isActive,
    className: (0, _clsx.default)('block-editor-global-styles__shadow__item', {
      'is-active': isActive
    }),
    render: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
      className: (0, _clsx.default)('block-editor-global-styles__shadow-indicator', {
        unset: type === 'unset'
      }),
      onClick: onSelect,
      label: label,
      style: {
        boxShadow: shadow
      },
      showTooltip: true,
      children: isActive && /*#__PURE__*/(0, _jsxRuntime.jsx)(_icons.Icon, {
        icon: _icons.check
      })
    })
  });
}
function ShadowPopover({
  shadow,
  onShadowChange,
  settings
}) {
  const popoverProps = {
    placement: 'left-start',
    offset: 36,
    shift: true
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Dropdown, {
    popoverProps: popoverProps,
    className: "block-editor-global-styles__shadow-dropdown",
    renderToggle: renderShadowToggle(),
    renderContent: () => /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalDropdownContentWrapper, {
      paddingSize: "medium",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ShadowPopoverContainer, {
        shadow: shadow,
        onShadowChange: onShadowChange,
        settings: settings
      })
    })
  });
}
function renderShadowToggle() {
  return ({
    onToggle,
    isOpen
  }) => {
    const toggleProps = {
      onClick: onToggle,
      className: (0, _clsx.default)({
        'is-open': isOpen
      }),
      'aria-expanded': isOpen
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
      ...toggleProps,
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalHStack, {
        justify: "flex-start",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_icons.Icon, {
          className: "block-editor-global-styles__toggle-icon",
          icon: _icons.shadow,
          size: 24
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.FlexItem, {
          children: (0, _i18n.__)('Drop shadow')
        })]
      })
    });
  };
}
function useShadowPresets(settings) {
  return (0, _element.useMemo)(() => {
    var _settings$shadow$pres;
    if (!settings?.shadow) {
      return EMPTY_ARRAY;
    }
    const defaultPresetsEnabled = settings?.shadow?.defaultPresets;
    const {
      default: defaultShadows,
      theme: themeShadows,
      custom: customShadows
    } = (_settings$shadow$pres = settings?.shadow?.presets) !== null && _settings$shadow$pres !== void 0 ? _settings$shadow$pres : {};
    const unsetShadow = {
      name: (0, _i18n.__)('Unset'),
      slug: 'unset',
      shadow: 'none'
    };
    const shadowPresets = [...(defaultPresetsEnabled && defaultShadows || EMPTY_ARRAY), ...(themeShadows || EMPTY_ARRAY), ...(customShadows || EMPTY_ARRAY)];
    if (shadowPresets.length) {
      shadowPresets.unshift(unsetShadow);
    }
    return shadowPresets;
  }, [settings]);
}
//# sourceMappingURL=shadow-panel-components.js.map