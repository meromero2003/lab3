{"version":3,"names":["_element","require","_data","_deprecated","_interopRequireDefault","_isShallowEqual","_store","_layouts","pendingSettingsUpdates","WeakMap","useShallowMemo","value","prevValue","setPrevValue","useState","isShallowEqual","useNestedSettingsUpdate","clientId","parentLock","allowedBlocks","prioritizedInserterBlocks","defaultBlock","directInsert","__experimentalDefaultBlock","__experimentalDirectInsert","templateLock","captureToolbars","orientation","layout","registry","useRegistry","_allowedBlocks","_prioritizedInserterBlocks","useMemo","_templateLock","undefined","useLayoutEffect","newSettings","__experimentalCaptureToolbars","layoutType","getLayoutType","type","getOrientation","deprecated","alternative","since","version","get","set","window","queueMicrotask","settings","Object","keys","length","updateBlockListSettings","dispatch","blockEditorStore"],"sources":["@wordpress/block-editor/src/components/inner-blocks/use-nested-settings-update.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useLayoutEffect, useMemo, useState } from '@wordpress/element';\nimport { useRegistry } from '@wordpress/data';\nimport deprecated from '@wordpress/deprecated';\nimport isShallowEqual from '@wordpress/is-shallow-equal';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\nimport { getLayoutType } from '../../layouts';\n\n/** @typedef {import('../../selectors').WPDirectInsertBlock } WPDirectInsertBlock */\n\nconst pendingSettingsUpdates = new WeakMap();\n\nfunction useShallowMemo( value ) {\n\tconst [ prevValue, setPrevValue ] = useState( value );\n\tif ( ! isShallowEqual( prevValue, value ) ) {\n\t\tsetPrevValue( value );\n\t}\n\treturn prevValue;\n}\n\n/**\n * This hook is a side effect which updates the block-editor store when changes\n * happen to inner block settings. The given props are transformed into a\n * settings object, and if that is different from the current settings object in\n * the block-editor store, then the store is updated with the new settings which\n * came from props.\n *\n * @param {string}               clientId                   The client ID of the block to update.\n * @param {string}               parentLock\n * @param {string[]}             allowedBlocks              An array of block names which are permitted\n *                                                          in inner blocks.\n * @param {string[]}             prioritizedInserterBlocks  Block names and/or block variations to be prioritized in the inserter, in the format {blockName}/{variationName}.\n * @param {?WPDirectInsertBlock} defaultBlock               The default block to insert: [ blockName, { blockAttributes } ].\n * @param {?boolean}             directInsert               If a default block should be inserted directly by the appender.\n *\n * @param {?WPDirectInsertBlock} __experimentalDefaultBlock A deprecated prop for the default block to insert: [ blockName, { blockAttributes } ]. Use `defaultBlock` instead.\n *\n * @param {?boolean}             __experimentalDirectInsert A deprecated prop for whether a default block should be inserted directly by the appender. Use `directInsert` instead.\n *\n * @param {string}               [templateLock]             The template lock specified for the inner\n *                                                          blocks component. (e.g. \"all\")\n * @param {boolean}              captureToolbars            Whether or children toolbars should be shown\n *                                                          in the inner blocks component rather than on\n *                                                          the child block.\n * @param {string}               orientation                The direction in which the block\n *                                                          should face.\n * @param {Object}               layout                     The layout object for the block container.\n */\nexport default function useNestedSettingsUpdate(\n\tclientId,\n\tparentLock,\n\tallowedBlocks,\n\tprioritizedInserterBlocks,\n\tdefaultBlock,\n\tdirectInsert,\n\t__experimentalDefaultBlock,\n\t__experimentalDirectInsert,\n\ttemplateLock,\n\tcaptureToolbars,\n\torientation,\n\tlayout\n) {\n\t// Instead of adding a useSelect mapping here, please add to the useSelect\n\t// mapping in InnerBlocks! Every subscription impacts performance.\n\n\tconst registry = useRegistry();\n\n\t// Implementors often pass a new array on every render,\n\t// and the contents of the arrays are just strings, so the entire array\n\t// can be passed as dependencies but We need to include the length of the array,\n\t// otherwise if the arrays change length but the first elements are equal the comparison,\n\t// does not works as expected.\n\tconst _allowedBlocks = useShallowMemo( allowedBlocks );\n\n\tconst _prioritizedInserterBlocks = useMemo(\n\t\t() => prioritizedInserterBlocks,\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t\tprioritizedInserterBlocks\n\t);\n\n\tconst _templateLock =\n\t\ttemplateLock === undefined || parentLock === 'contentOnly'\n\t\t\t? parentLock\n\t\t\t: templateLock;\n\n\tuseLayoutEffect( () => {\n\t\tconst newSettings = {\n\t\t\tallowedBlocks: _allowedBlocks,\n\t\t\tprioritizedInserterBlocks: _prioritizedInserterBlocks,\n\t\t\ttemplateLock: _templateLock,\n\t\t};\n\n\t\t// These values are not defined for RN, so only include them if they\n\t\t// are defined.\n\t\tif ( captureToolbars !== undefined ) {\n\t\t\tnewSettings.__experimentalCaptureToolbars = captureToolbars;\n\t\t}\n\n\t\t// Orientation depends on layout,\n\t\t// ideally the separate orientation prop should be deprecated.\n\t\tif ( orientation !== undefined ) {\n\t\t\tnewSettings.orientation = orientation;\n\t\t} else {\n\t\t\tconst layoutType = getLayoutType( layout?.type );\n\t\t\tnewSettings.orientation = layoutType.getOrientation( layout );\n\t\t}\n\n\t\tif ( __experimentalDefaultBlock !== undefined ) {\n\t\t\tdeprecated( '__experimentalDefaultBlock', {\n\t\t\t\talternative: 'defaultBlock',\n\t\t\t\tsince: '6.3',\n\t\t\t\tversion: '6.4',\n\t\t\t} );\n\t\t\tnewSettings.defaultBlock = __experimentalDefaultBlock;\n\t\t}\n\n\t\tif ( defaultBlock !== undefined ) {\n\t\t\tnewSettings.defaultBlock = defaultBlock;\n\t\t}\n\n\t\tif ( __experimentalDirectInsert !== undefined ) {\n\t\t\tdeprecated( '__experimentalDirectInsert', {\n\t\t\t\talternative: 'directInsert',\n\t\t\t\tsince: '6.3',\n\t\t\t\tversion: '6.4',\n\t\t\t} );\n\t\t\tnewSettings.directInsert = __experimentalDirectInsert;\n\t\t}\n\n\t\tif ( directInsert !== undefined ) {\n\t\t\tnewSettings.directInsert = directInsert;\n\t\t}\n\n\t\tif (\n\t\t\tnewSettings.directInsert !== undefined &&\n\t\t\ttypeof newSettings.directInsert !== 'boolean'\n\t\t) {\n\t\t\tdeprecated( 'Using `Function` as a `directInsert` argument', {\n\t\t\t\talternative: '`boolean` values',\n\t\t\t\tsince: '6.5',\n\t\t\t} );\n\t\t}\n\n\t\t// Batch updates to block list settings to avoid triggering cascading renders\n\t\t// for each container block included in a tree and optimize initial render.\n\t\t// To avoid triggering updateBlockListSettings for each container block\n\t\t// causing X re-renderings for X container blocks,\n\t\t// we batch all the updatedBlockListSettings in a single \"data\" batch\n\t\t// which results in a single re-render.\n\t\tif ( ! pendingSettingsUpdates.get( registry ) ) {\n\t\t\tpendingSettingsUpdates.set( registry, {} );\n\t\t}\n\t\tpendingSettingsUpdates.get( registry )[ clientId ] = newSettings;\n\t\twindow.queueMicrotask( () => {\n\t\t\tconst settings = pendingSettingsUpdates.get( registry );\n\t\t\tif ( Object.keys( settings ).length ) {\n\t\t\t\tconst { updateBlockListSettings } =\n\t\t\t\t\tregistry.dispatch( blockEditorStore );\n\t\t\t\tupdateBlockListSettings( settings );\n\t\t\t\tpendingSettingsUpdates.set( registry, {} );\n\t\t\t}\n\t\t} );\n\t}, [\n\t\tclientId,\n\t\t_allowedBlocks,\n\t\t_prioritizedInserterBlocks,\n\t\t_templateLock,\n\t\tdefaultBlock,\n\t\tdirectInsert,\n\t\t__experimentalDefaultBlock,\n\t\t__experimentalDirectInsert,\n\t\tcaptureToolbars,\n\t\torientation,\n\t\tlayout,\n\t\tregistry,\n\t] );\n}\n"],"mappings":"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","ignoreList":[]}